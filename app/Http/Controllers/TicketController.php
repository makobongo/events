<?php

namespace App\Http\Controllers;

use App\Models\Ticket;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class TicketController extends Controller
{
    private $consumer_key;
    private $consumer_secret;
    private $env;
    private $mpesa_url;
    private $pass_key;
    private $call_back_url;

    public function __construct()
    {
        $this->consumer_key = config('mpesa.credentials.consumer_key');
        $this->consumer_secret = config('mpesa.credentials.consumer_secret');
        $this->env = config('mpesa.credentials.mpesa_env');
        $this->mpesa_url = config('mpesa.credentials.mpesa_url');
        $this->pass_key = config('mpesa.credentials.pass_key');
        $this->call_back_url = config('mpesa.credentials.call_back_url');
    }
    /**
     * Generates access token
     */
    public function generateAccesstoken()
    {
        $credentials = base64_encode($this->consumer_key . ':' . $this->consumer_secret);
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $this->env == 0 ? 'https://sandbox.safaricom.co.ke/oauth/v1/generate?grant_type=client_credentials' : "https://api.safaricom.co.ke/oauth/v1/generate?grant_type=client_credentials");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, ['Authorization: Basic ' . $credentials, 'Content-Type: application/json; charset=utf-8']);
        $response = curl_exec($ch);
        $info = curl_getinfo($ch);
        curl_close($ch);
        $response = json_decode($response);

        if ($info["http_code"] == 200) {
            $access_token = $response->access_token;
            return $access_token;
        } else {
            return false;
        }
    }
    public function lipaNaMpesaOnline()
    {
        // // Format the phone number to Intl format
        $phone = sprintf('254%s', substr(request()->phone, 1, 9));

        $price = (float)request()->ticket_price;
        // // Generate an access token
        $accessToken = $this->generateAccesstoken();
        // // Build the URL for the lnmo endpoint
        $url = sprintf('%smpesa/stkpush/v1/processrequest', $this->mpesa_url);
        // // Read the config data
        $shortcode = 174379;
        // // Get the current timestamp
        $timestamp = now()->format('YmdHis');

        // The password for encrypting the request.
        $passkey = $this->pass_key;
        //This is generated by base64 encoding BusinessShortcode, Passkey and Timestamp.
        $password = base64_encode(sprintf('%s%s%s', $shortcode, $passkey, $timestamp));
        $callbackUrl = $this->call_back_url.'/stk_callback';
        // // Make the request
        $response = Http::withToken($accessToken)->post($url, [
            'BusinessShortCode' => $shortcode,
            'Password' => $password,
            'Timestamp' => $timestamp,
            'TransactionType' => 'CustomerPayBillOnline',
            'Amount' => $price,
            'PartyA' => $phone,
            'PartyB' => $shortcode,
            'PhoneNumber' => $phone,
            'CallBackURL' => $callbackUrl,
            'AccountReference' => 'SIXX SPIRITS LTD',
            'TransactionDesc' => 'Payment For SIXX SPIRITS GOODS.'
        ])->json();

        return $response;

        // Keep track of the request status
        // $isSuccessful = false;

        // // // Check if the request was successful
        // if ($response['ResponseCode'] == "0") {
        //    return $response;
        // }

        // // // TODO process the response data here
        // return $isSuccessful;
    }

    /**
     * Process the callback data sent to this endpoint
     */
    public function lipaNaMpesaCallback()
    {
        Log::info('STK Push endpoint hit');
        Log::info(request()->all());
        // $callbackData = $response->Body->stkCallback;
        // $merchantRequestID = $callbackData->MerchantRequestID;
        // $checkoutRequestID = $callbackData->CheckoutRequestID;
        // $resultCode = $callbackData->ResultCode;

        // // TODO perform payment validation here


        // // Check if the transaction was successful on mpesa.
        // // Successful transactions return a status code of 0
        // if ($resultCode != 0) {
        //     try {
        //         // TODO update payments data here for failed transactions. Also reject the payment
        //     } catch (Exception $e) {
        //         throw new Exception($e->getMessage());
        //     }
        // }

        // // Extract the data for successful transactions
        // $callbackMetadata = $callbackData->CallbackMetadata;
        // $transactionID = $callbackMetadata->Item[1]->Value;

        // // TODO Check for existing transaction ID
        // if ($this->transactionIDExists($transactionID)) {
        //     // Reject transaction
        //     return;
        // }

        // return response()->json([
        //     "ResultCode" => 0,
        //     "ResultDesc" => "Success",
        // ], Response::HTTP_OK)->header('Content-Type', 'application/json');
    }
}
