<?php

namespace App\Http\Controllers;

use App\Mail\sendMail;
use App\Models\Payment;
use App\Models\Ticket;
use Illuminate\Http\Response;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Mail;
use PDF;
use Alert;
use Illuminate\Support\Facades\Storage;

class TicketController extends Controller
{
    private $consumer_key;
    private $consumer_secret;
    private $env;
    private $mpesa_url;
    private $pass_key;
    private $call_back_url;

    public function __construct()
    {
        $this->consumer_key = config('mpesa.credentials.consumer_key');
        $this->consumer_secret = config('mpesa.credentials.consumer_secret');
        $this->env = config('mpesa.credentials.mpesa_env');
        $this->mpesa_url = config('mpesa.credentials.mpesa_url');
        $this->pass_key = config('mpesa.credentials.pass_key');
        $this->call_back_url = config('mpesa.credentials.call_back_url');
    }
    /**
     * Generates access token
     */
    public function generateAccesstoken()
    {
        $credentials = base64_encode($this->consumer_key . ':' . $this->consumer_secret);
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $this->env == 0 ? 'https://sandbox.safaricom.co.ke/oauth/v1/generate?grant_type=client_credentials' : "https://api.safaricom.co.ke/oauth/v1/generate?grant_type=client_credentials");
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, ['Authorization: Basic ' . $credentials, 'Content-Type: application/json; charset=utf-8']);
        $response = curl_exec($ch);
        $info = curl_getinfo($ch);
        curl_close($ch);
        $response = json_decode($response);

        if ($info["http_code"] == 200) {
            $access_token = $response->access_token;
            return $access_token;
        } else {
            return false;
        }
    }
    public function lipaNaMpesaOnline()
    {
        // alert::alert('Title', 'Message', 'Type');
        // alert::info('SIXX SPIRITS','Kindly Check your phone and enter password to process payment');
        // return redirect()->back();
        // // Format the phone number to Intl format
        $phone = sprintf('254%s', substr(request()->phone, 1, 9));

        $price = (float)request()->ticket_price * (int)request()->number_of_tickets;
        // // Generate an access token
        $accessToken = $this->generateAccesstoken();
        // // Build the URL for the lnmo endpoint
        $url = sprintf('%smpesa/stkpush/v1/processrequest', $this->mpesa_url);
        // // Read the config data
        $shortcode = 174379;
        // // Get the current timestamp
        $timestamp = now()->format('YmdHis');

        // The password for encrypting the request.
        $passkey = $this->pass_key;
        //This is generated by base64 encoding BusinessShortcode, Passkey and Timestamp.
        $password = base64_encode(sprintf('%s%s%s', $shortcode, $passkey, $timestamp));
        // $callbackUrl = $this->call_back_url.'/stk_callback';
        $callbackUrl = $this->call_back_url . '/stk_callback';
        // // Make the request
        $response = Http::withToken($accessToken)->post($url, [
            'BusinessShortCode' => $shortcode,
            'Password' => $password,
            'Timestamp' => $timestamp,
            'TransactionType' => 'CustomerPayBillOnline',
            'Amount' => $price,
            'PartyA' => $phone,
            'PartyB' => $shortcode,
            'PhoneNumber' => $phone,
            'CallBackURL' => $callbackUrl,
            'AccountReference' => 'SIXX SPIRITS LTD',
            'TransactionDesc' => 'Payment For SIXX SPIRITS GOODS.'
        ])->json();

        alert::info('SIXX SPIRITS', 'Kindly Check your phone and enter password to process payment');
        return redirect()->back();

        // return $response;
    }

    public function mpesaConfirmation()
    {
        $content = json_decode(request()->getContent(), true);
        if (!is_null($content)) {
            Payment::create([
                'TransactionType' => $content['TransactionType'],
                'TransID' => $content['TransID'],
                'TransTime' => date('Y-m-d H:i:s', strtotime($content['TransTime'])),
                'TransAmount' => $content['TransAmount'],
                'BusinessShortCode' => $content['BusinessShortCode'],
                'BillRefNumber' => $content['BillRefNumber'],
                'InvoiceNumber' => $content['InvoiceNumber'],
                'OrgAccountBalance' => $content['OrgAccountBalance'],
                'ThirdPartyTransID' => $content['ThirdPartyTransID'],
                'MSISDN' => $content['MSISDN'],
                'FirstName' => $content['FirstName'],
                'MiddleName' => $content['MiddleName'],
                'LastName' => $content['LastName'],
                'ticket_is_valid' => true
            ]);
            //sending email
            Mail::to('itsupport@sixx-spirits.com')
                // ->cc(['finance@sixx-spirits.com'])
                ->send(new sendMail($content));
            return response()->json([
                'msg' => 'success'
            ]);
        } else {
            return response()->json([
                'msg' => 'data not available!'
            ]);
        }
    }

    public function mpesaValidation()
    {
        $result_code = "0";
        $result_validation = "Accepted";
        return $this->createValidationResponse($result_code, $result_validation);
    }
    public function createValidationResponse($result_code, $result_validation)
    {
        $result = json_encode(['ResultCode' => $result_code, 'ResultDesc' => $result_validation]);
        $response = new Response();
        $response->headers->set("Content-Type", "application/json; charset-utf-8");
        $response->setContent($result);
        return $response;
    }

    /**
     * Process the callback data sent to this endpoint
     */
    public function lipaNaMpesaCallback()
    {
        $content = json_decode(request()->getContent(), true);
        if (!is_null($content)) {
            $MerchantRequestID = $content['MerchantRequestID'];
            $CheckoutRequestID = $content['CheckoutRequestID'];
            $ResultCode = $content['ResultCode'];
            $ResultDesc = $content['ResultDesc'];
            if ($ResultCode == 0) {
                alert::success('Successful!', 'Payment processed successfully');
            } else {
                alert::error('Ooops!', 'Payment failed');
            }
        } else {
            alert::error('Ooops!', 'Something went wrong');
            return redirect()->back();
        }
    }

    public function generatePDF()
    {
        $data = [
            'title' => 'SIXX',
            'date' => date('m/d/Y'),
        ];

        $pdf = PDF::loadView('pdf.ticket', $data);

        return $pdf->download('document.pdf');
    }
}
